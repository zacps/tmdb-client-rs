/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserializer, Deserialize};

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct ListObject {
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "favorite_count", skip_serializing_if = "Option::is_none")]
    pub favorite_count: Option<i32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none", deserialize_with = "deserialize_string_from_number_optional")]
    pub id: Option<String>,
    #[serde(rename = "item_count", skip_serializing_if = "Option::is_none")]
    pub item_count: Option<i32>,
    #[serde(rename = "iso_639_1", skip_serializing_if = "Option::is_none")]
    pub iso_639_1: Option<String>,
    #[serde(rename = "list_type", skip_serializing_if = "Option::is_none")]
    pub list_type: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "poster_path", skip_serializing_if = "Option::is_none")]
    pub poster_path: Option<String>,
}

fn deserialize_string_from_number_optional<'de, D>(deserializer: D) -> Result<Option<String>, D::Error>
where
    D: Deserializer<'de>,
{
    #[derive(Deserialize)]
    #[serde(untagged)]
    enum StringOrInt {
        String(String),
        Number(i64),
        None
    }

    match StringOrInt::deserialize(deserializer)? {
        StringOrInt::String(s) => Ok(Some(s)),
        StringOrInt::Number(i) => Ok(Some(i.to_string())),
        StringOrInt::None => Ok(None)
    }
}
